---
layout: default
title: "01: All Pawns Must Die"
date:   2017-09-29 15:00:00 -0700
categories: coding csharp game chess uci
excerpt: "All Pawns Must Die is a simple GUI for chess engines over UCI. In this first post, I'll give an overview of the problem, and the basic parts I'll need to solve it.  In future posts, I'll go through more specific pieces of the design."
author: "manixaist"
---

# All Pawns Must Die
[All Pawns Must Die](https://github.com/manixaist/AllPawnsMustDie) is a simple GUI for chess engines over UCI.  I needed a C# project to get back into the language, and I've been a bit obsessed with writing a chess GUI, thus, *All Pawns Must Die* was born.  In this first post, I'll give an overview of the problem, and the basic parts I'll need to solve it.  In future posts, I'll go through more specific pieces of the design.

## The Problem
Programs exist that can calculate best moves for a given chess position.  These programs are called [chess engines](https://en.wikipedia.org/wiki/Chess_engine) and the stronger the chess engine, the [better](http://www.computerchess.org.uk/ccrl/4040/) these move calculations will be.  There are a myriad of engines, from commercial engines like [Fritz](https://en.wikipedia.org/wiki/Fritz_(chess)), to hobbyist projects like [MadChess](http://www.madchess.net/).

I suggest starting with [StockFish](https://stockfishchess.org/).  It's open source, it's free, and it's extremely resilient compared to other engines IMHO.

By and large, these chess engines do not have anything in the way of UI, so playing an actual game of chess isn't easy "out of the box".  Commercial engines will typically come with a GUI (you paid for it).  There are existing free GUIs as well, and there are even websites that offer play against engines such as [lichess.org](lichess.org).

So what am I doing if these things exist already?  Two things, firstly a lot of the free GUIs show their age, both in the Win32 UI and in the massive amount of related and pseudo-related features added on top.  I'm not knocking these apps, they are well known in chess circles and well tested, but their flexibility is also their downside for me.  They can seem impenetrable.  Secondly, this is a learning project; a hobbyist indulging a hobby, and we'll end up talking about things that are reuasable in any application, such as threads and process interaction. 

## The Solution
A simple, clean, easy to use basic GUI for playing against UCI chess engines.  

![](/images/APMD_gameplay_v1.gif)

I'll be using C# for the language, and Windows Forms for the GUI.  I chose C# because I wanted a C# project, and I chose to use Forms (versus DirectX or something fancier) so I could focus on the basic engine wrapping and flow, and not get bogged down in making it look pretty.

I decided to keep the feature set small as well beyond basic play.  For example, one "extra" feature I added was the engine can play itself.  This was very useful for testing, so it was worth the extra work.  Sometimes it's just fun to watch it go.

Now that I have the chess engine and I have the pieces I need to write the GUI, one last major hurdle remains.  How are they going to talk to each other?

### Chess Protocols
Protocols are how things communicate; ftp, http, tcp/ip, etc.  For chess engines, there are 2 main options; winboard or [UCI](http://wbec-ridderkerk.nl/html/UCIProtocol.html). UCI is the newer one, and it's the one I went with.

## Chess Engines and UCI, How Do They Work?
Before you can start writing an application to control a chess engine, it might be a good idea to understand how they work.  It is possible after all to play a complete game in the console.  I wouldn't advise it though.

If you want to follow along, download [StockFish](https://stockfishchess.org/) and then launch it in a command prompt window (or terminal on Linux, you can follow this part even if you're not on Windows).  

Replace the path below with the path you saved stockfish locally.
```
c:\chess\stockfish\stockfish_8_x64.exe
```

You should see a one line response (or similar).
```
< Stockfish 8 64 by T. Romstad, M. Costalba, J. Kiiski, G. Linscott
```

You need to initialize the protocol.  At this point you're entering input into the chess engine itself, so type ```uci``` to initialize uci with the engine.
```
> uci
```
Response...
```
< id name Stockfish 8 64
< id author T. Romstad, M. Costalba, J. Kiiski, G. Linscott

< option name Debug Log File type string default 
< option name Contempt type spin default 0 min -100 max 100
< option name Threads type spin default 1 min 1 max 128
< option name Hash type spin default 16 min 1 max 1048576
< option name Clear Hash type button
< option name Ponder type check default false
< option name MultiPV type spin default 1 min 1 max 500
< option name Skill Level type spin default 20 min 0 max 20
< option name Move Overhead type spin default 30 min 0 max 5000
< option name Minimum Thinking Time type spin default 20 min 0 max 5000
< option name Slow Mover type spin default 89 min 10 max 1000
< option name nodestime type spin default 0 min 0 max 10000
< option name UCI_Chess960 type check default false
< option name SyzygyPath type string default <empty>
< option name SyzygyProbeDepth type spin default 1 min 1 max 100
< option name Syzygy50MoveRule type check default true
< option name SyzygyProbeLimit type spin default 6 min 0 max 6
< uciok
```

Now you'll see a bunch of option lines and some ids.  This output is highly engine dependent and we can ignore it all for this example.  Note the last line, which indicates the protocol is ready.

Stockfish and most engines init a new game automatically, though you can also send ```ucinewgame``` to start a new game.  Thanks to the handy ```d``` command stockfish provides, we can manually inspect the state of the board with the engine.  Note black is lowercase and white is uppercase.  The piece abbreviations are standard for chess.
```
> d
```
```
< +---+---+---+---+---+---+---+---+
< | r | n | b | q | k | b | n | r |
< +---+---+---+---+---+---+---+---+
< | p | p | p | p | p | p | p | p |
< +---+---+---+---+---+---+---+---+
< |   |   |   |   |   |   |   |   |
< +---+---+---+---+---+---+---+---+
< |   |   |   |   |   |   |   |   |
< +---+---+---+---+---+---+---+---+
< |   |   |   |   |   |   |   |   |
< +---+---+---+---+---+---+---+---+
< |   |   |   |   |   |   |   |   |
< +---+---+---+---+---+---+---+---+
< | P | P | P | P | P | P | P | P |
< +---+---+---+---+---+---+---+---+
< | R | N | B | Q | K | B | N | R |
< +---+---+---+---+---+---+---+---+

< Fen: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1
< Key: B4D30CD15A43432D
< Checkers: 
```

At the bottom you'll notice a few lines.  I'm only going to focus on the first line since it will become vitally important later; the [FEN](https://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation).

### Forsythâ€“Edwards Notation (FEN)
From the Wikipedia entry, FEN *"is a standard notation for describing a particular board position of a chess game. The purpose of FEN is to provide all the necessary information to restart a game from a particular position."*  So the FEN allows us to save state of the game, and a series of FENs could be used to completely describe a game in theory.

There are 6 parts to the FEN, separated by a space, and from left to right they are...
* The pieces (location and type)
* The active player's turn ('w'hite or 'b'lack)
* The castling rights still available (if any)
* An En-Passant target square (if any)
* The number of half-moves (moves since a pawn move or capture- used for 50 move draw rule)
* The number of full-move (each player has had a turn)

I will go into more depth on this later.  For now, just know what it represents; the board state.

Let's apply a move as if we're playing white.  We can start with a Queen's pawn opening like this...
```
> position startpos moves e2e4
```

Or we could do this...send it an already updated FEN
```
> position fen rnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR b KQkq - 0 1
```

Either way, if we check the board again, we should see the white pawn (P) has moved.
```
> d
```
```
< +---+---+---+---+---+---+---+---+
< | r | n | b | q | k | b | n | r |
< +---+---+---+---+---+---+---+---+
< | p | p | p | p | p | p | p | p |
< +---+---+---+---+---+---+---+---+
< |   |   |   |   |   |   |   |   |
< +---+---+---+---+---+---+---+---+
< |   |   |   |   |   |   |   |   |
< +---+---+---+---+---+---+---+---+
< |   |   |   | P |   |   |   |   |
< +---+---+---+---+---+---+---+---+
< |   |   |   |   |   |   |   |   |
< +---+---+---+---+---+---+---+---+
< | P | P | P |   | P | P | P | P |
< +---+---+---+---+---+---+---+---+
< | R | N | B | Q | K | B | N | R |
< +---+---+---+---+---+---+---+---+

< Fen: rnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR b KQkq - 0 1
```

Now how to make black move?  Well, we don't actually ask black to move.  What we do, is ask the engine for the best move at a position, and we just set that position above.  Once we get that move, we update the board ourselves with the engine, setting a new position...rinse and repeat.  

The simplest way to do that is just giving a timeout (there are more optional parameters as well such as time remaining for player) to the ```go``` command.  Note I made this timeout very short (it's in milliseconds) to reduce the output as an example.
```
> go movetime 250
```
Responses from the engine...
```
< info depth 1 seldepth 1 multipv 1 score cp -8 nodes 20 nps 6666 tbhits 0 time 3 pv d7d5
< info depth 2 seldepth 2 multipv 1 score cp -47 nodes 72 nps 24000 tbhits 0 time 3 pv d7d5 e2e3
< info depth 3 seldepth 3 multipv 1 score cp -8 nodes 143 nps 35750 tbhits 0 time 4 pv d7d5 e2e3 e7e6
< info depth 4 seldepth 4 multipv 1 score cp -42 nodes 472 nps 94400 tbhits 0 time 5 pv d7d5 b1c3 e7e6 e2e3
< info depth 5 seldepth 7 multipv 1 score cp -12 nodes 1330 nps 221666 tbhits 0 time 6 pv g8f6 c1f4 f6d5 e2e3 e7e6
< info depth 6 seldepth 7 multipv 1 score cp -42 nodes 2901 nps 414428 tbhits 0 time 7 pv d7d5 g1f3 g8f6 e2e3 e7e6 b1c3
< info depth 7 seldepth 8 multipv 1 score cp -8 nodes 4827 nps 536333 tbhits 0 time 9 pv d7d5 g1f3 g8f6 e2e3 b8c6 b1c3 e7e6
< info depth 8 seldepth 8 multipv 1 score cp -26 nodes 8761 nps 625785 tbhits 0 time 14 pv d7d5 e2e3 e7e6 g1f3 b8c6 c2c4 f8b4 b1c3
< info depth 9 seldepth 11 multipv 1 score cp -32 nodes 16124 nps 575857 tbhits 0 time 28 pv d7d5 g1f3 b8c6 c2c4 e7e5 f3e5 d5c4 e5c6 b7c6
< info depth 10 seldepth 14 multipv 1 score cp -25 nodes 53543 nps 892383 tbhits 0 time 60 pv g8f6 e2e3 e7e6 g1f3 d7d5 f1d3 f8d6 e1g1 e8g8 c2c4 d5c4 d3c4
< info depth 11 seldepth 16 multipv 1 score cp -37 nodes 81560 nps 948372 tbhits 0 time 86 pv g8f6 e2e3 e7e6 g1f3 d7d5 f1d3 f8d6 e1g1 e8g8 c2c4 d5c4 d3c4
< info depth 12 seldepth 16 multipv 1 score cp -28 nodes 126924 nps 1023580 tbhits 0 time 124 pv d7d5 g1f3 e7e6 e2e3 c7c5 f1e2 b8c6 e1g1 c5c4 b1c3 g8f6 g1h1
< info depth 13 seldepth 17 multipv 1 score cp -27 nodes 192956 nps 1115352 tbhits 0 time 173 pv d7d5 g1f3 e7e6 e2e3 c7c5 f1e2 g8f6 e1g1 f8d6 d4c5 d6c5 c2c4 e8g8 c1d2 d5c4 b1c3 b8c6
< info depth 14 seldepth 17 multipv 1 score cp -8 nodes 286968 nps 1166536 tbhits 0 time 246 pv g8f6 e2e3 e7e6 g1f3 f8e7 f1d3 d7d5 e1g1 e8g8 b1d2 c7c5 d4c5 b8c6 e3e4 d5e4 d2e4 f6e4 d3e4
< info depth 15 seldepth 21 multipv 1 score cp -8 nodes 294402 nps 1168261 tbhits 0 time 252 pv g8f6 e2e3 e7e6 g1f3 f8e7 f1d3 d7d5 e1g1 e8g8 b1d2 c7c5 d4c5 b8c6 e3e4 d5e4 d2e4 f6e4 d3e4
< bestmove g8f6 ponder e2e3
```

The ```info``` lines describe the current thinking chess lines in this case and gives details on the scoring, etc.  This is all in the UCI spec, and we'll ignore it for now.  

The last response from the engine was ```bestmove g8f6 ponder e2e3```.  Ignore the ponder for now as well and we have the move the engine thinks is best, ```g8f6```.  

We have at least 3 options now, a startpos plus moves, the starting FEN plus moves, or we just send an updated FEN.  

#### The Problems Begin...
At first you may assume a position plus a list of moves would be ideally reusable, and save the cost of calculating FENS, but you'd be wrong.  In reality, the input buffer for engines vary, so you won't know how long your move list can ultimately grow.

Then you might think, *well I can save the last FEN and then send just 1 move each turn.  Surely that will always be below the buffer?*  Probably, but again some engines seem to barf on this (despite the protocol specifically allowing it).  In practice, you'll see I end up calculating the FEN myself for various reasons, this being one of them.  Plus if you're calculating the FEN anyway, why bother sending the old FEN + the move, if you already have the result, which is what the engine wants anyway....

For now, for simplicity, I'll show the FEN plus the move command, then dump the new board.  So it's our last position, where white moved, plus the new move we want to apply.
```
> position fen rnbqkbnr/pppppppp/8/8/3P4/8/PPP1PPPP/RNBQKBNR b KQkq - 0 1 moves g8f6
> d
```
```
< +---+---+---+---+---+---+---+---+
< | r | n | b | q | k | b |   | r |
< +---+---+---+---+---+---+---+---+
< | p | p | p | p | p | p | p | p |
< +---+---+---+---+---+---+---+---+
< |   |   |   |   |   | n |   |   |
< +---+---+---+---+---+---+---+---+
< |   |   |   |   |   |   |   |   |
< +---+---+---+---+---+---+---+---+
< |   |   |   | P |   |   |   |   |
< +---+---+---+---+---+---+---+---+
< |   |   |   |   |   |   |   |   |
< +---+---+---+---+---+---+---+---+
< | P | P | P |   | P | P | P | P |
< +---+---+---+---+---+---+---+---+
< | R | N | B | Q | K | B | N | R |
< +---+---+---+---+---+---+---+---+

< Fen: rnbqkb1r/pppppppp/5n2/8/3P4/8/PPP1PPPP/RNBQKBNR w KQkq - 1 2
```

Sadly, the UCI protocol does not just respond with the updated FEN so while we can verify it in StockFish with ```d```, it won't help us in code later.

Now in this manner, you could continue until the game is over, but the logic of moving on your end is up to you.  If, for example, you feed the engine an illegal move, it may ignore it (or it may crash).  That's on you.

### What's Wrong With UCI?
Now that I've shown you the very basics of UCI, I'll complain about it a bit from the perspective of a consumer.  I have 2 main issues with UCI (in addition to the one already listed above).

#### 1) Not Every Command Has a Response
For example, the "position" command used in the example above gives no response.  None.  For connectionless streaming datagrams this might be ok, but it seems less fine here.

So while in a sane protocol you might expect the following command...
```
> position fen rnbqkbnr/ppp2ppp/4p3/3p4/2PPP3/8/PP3PPP/RNBQKBNR b KQkq - 0 3
```
to return something like this...
```
< position ok!
```
or 
```
> position newfen rnbqkbnr/ppp2ppp/4p3/3p4/2PPP3/8/PP3PPP/RNBQKBNR b KQkq - 0 3
```

Instead you get this...
```
```

Now, to be fair, UCI has a "solution" for this, the ```isready/readyok``` pair.  Rather than define the responses in the protocol, now you need to know which commands don't expect a response and sync up afterward with ```isready/readyok```.  This puts the burden on the consumer of the protocol and creates unnecessary back and forth traffic just to sync up in the common case.

Example:
```
> position fen rnbqkbnr/ppp2ppp/4p3/3p4/2PPP3/8/PP3PPP/RNBQKBNR b KQkq - 0 3
```
Immediately followed by...
```
> isready
```
```
< readyok
```

#### 2) The Commands That Do Are Often Non-Standard In Implementation
The best example here by far is the ```bestmove``` command.  Normally, this does behave in a more or less standard manner, returning the best evaluated move in SAN.  It will look something like this, in response to a ```go``` command.

```
> go movetime 5000
```
```
< bestmove d7d5
```

Seems simple enough right?  However, what happens if the position you feed the engine is mate, or drawn?  The answer is it depends entirely on the engine you're using, and some behave very badly *[crash]* though I can't blame the protocol for that one I suppose.  I had to abandon using this for endgame detection across the board as a result.

Here are some examples of the various responses you might see.  I honestly don't know which is "correct" or that UCI does either.
```
< bestmove (none) // stockfish 8 
< bestmove a1a1   // rybka and variants (note the move is illegal)
< bestmove Null	  // Madchess
< bestmove Error: Fatal no best move // Spike (my personal favorite)
```

Ok, I promise to keep UCI complaints to a minimum from here on out, except where it affects the code in a meaningful way.

### Summary
Now I have all of the pieces needed to build the GUI.  In future posts, I will outline the design of the application, specifically communication with the engine processes using UCI, and discuss how parts were implemented.  The [code](https://github.com/manixaist/AllPawnsMustDie) is always available for reference.




