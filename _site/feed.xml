<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>manixaist.github.io</title>
    <description>&lt;h1&gt;Developer Journal&lt;/h1&gt;&lt;h4&gt;Github pages for coding projects:&lt;/h4&gt;&lt;p/&gt;&lt;h4&gt;A collection of my hobbyist projects.&lt;/h4&gt;&lt;p/&gt;&lt;a href='http://xkcd.com/1724/'&gt;&lt;img src='http://imgs.xkcd.com/comics/proofs.png'/&gt;&lt;/a</description>
    <link>http://manixaist.github.io/</link>
    <atom:link href="http://manixaist.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 09 Sep 2016 01:12:38 -0700</pubDate>
    <lastBuildDate>Fri, 09 Sep 2016 01:12:38 -0700</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Cross Platform Game - 02</title>
        <description>&lt;h1 id=&quot;d-tiled-map-for-pac-man-clone&quot;&gt;2D Tiled Map for Pac-Man Clone&lt;/h1&gt;
&lt;p&gt;Last time we finished with a binary printing to the console on both platforms; not very exciting.  Today we’re going to start making this look more like a game by rendering a 2D tiled map to a window.  This map will be the start of our Pac-Man clone, the game maze.&lt;/p&gt;

&lt;p&gt;Behold our end goal for today!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/linuxout02.png&quot; alt=&quot;Running Linux Application&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;priorities&quot;&gt;Priorities&lt;/h3&gt;
&lt;p&gt;My main goal is to write code that is readable.  The code is not here to impress anyone with fancy uses of the language or getting umpteen things done in a single statement.  Clarity over cleverness or brevity for the sake of these posts.&lt;/p&gt;

&lt;p&gt;Also important is making sure we maintain parity on both platforms.  The last thing we need is to spend dozens or even hundreds of hours solving some problem and writing/debugging tons of code only to have it not even compile (or worse compile fine but behave differently).&lt;/p&gt;

&lt;p&gt;In the old DOS days, we could pack tile info into some clever struct of OR’d bits, etc, etc…this is not a good idea when the endianness can change on you.  It’s also not really necessary given we no longer run on quite the same extreme low ends of available memory.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;goals-for-today&quot;&gt;Goals for Today&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Install and setup SDL2-Image libraries&lt;/li&gt;
  &lt;li&gt;Create a window (800x600 will do nicely)&lt;/li&gt;
  &lt;li&gt;Load a PNG onto a texture&lt;/li&gt;
  &lt;li&gt;Divide the texture into tiles&lt;/li&gt;
  &lt;li&gt;Render the tiles based on map indicies&lt;/li&gt;
  &lt;li&gt;Run inside a simple fixed FPS loop&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;You went through the previous post(s)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example-code&quot;&gt;Example Code&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/manixaist/xplat-pmc-tutorial-02&quot;&gt;Github repo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;setup-windows&quot;&gt;Setup: Windows&lt;/h2&gt;
&lt;p&gt;To enable PNG support (as well as anything other than BMP) we need the SDL2 Image library.  Installing it will be exactly the same as the SDL2 library.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.libsdl.org/projects/SDL_image/&quot;&gt;SDL2-Image&lt;/a&gt;: download the development libraries and unzip them just like we did with the SDL2 files.  I placed them at the same root level (e.g. alongside ./SDL202.0.4).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’re going to want to place the development dlls in your system folder so they are accessible again as well.&lt;/p&gt;

&lt;h3 id=&quot;visual-studio-configuration&quot;&gt;Visual Studio Configuration:&lt;/h3&gt;
&lt;p&gt;All we need to do is add the new SDL_image libs just like before.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Project-&amp;gt;Properties-&amp;gt;Configuration Properties-&amp;gt;C++&amp;gt;Additional Include Directories&lt;/li&gt;
  &lt;li&gt;Add “SDL2_image-2.0.1\Include”&lt;/li&gt;
  &lt;li&gt;Click Apply&lt;/li&gt;
  &lt;li&gt;Project-&amp;gt;Properties-&amp;gt;Linker-&amp;gt;Input-&amp;gt;Additional Dependencies&lt;/li&gt;
  &lt;li&gt;Add “SDL2_image.lib”&lt;/li&gt;
  &lt;li&gt;Click Apply&lt;/li&gt;
  &lt;li&gt;Project-&amp;gt;Properties-&amp;gt;Linker-&amp;gt;General-&amp;gt;Additional Library Directories&lt;/li&gt;
  &lt;li&gt;Add your path to the libs (e.g. “..\SDL2_image-2.0.1\lib\x64)&lt;/li&gt;
  &lt;li&gt;Click Ok&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;setup-linux&quot;&gt;Setup: Linux&lt;/h2&gt;
&lt;p&gt;We need the same libs on linux, installing them is as easy as…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;sudo apt-get libsdl2-image-2.0-0
sudo apt-get libsdl2-image-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;setup-over-back-to-the-game&quot;&gt;Setup over, back to the game…&lt;/h2&gt;
&lt;p&gt;Check out &lt;a href=&quot;http://hackipedia.org/Games/Arcade/Pac-man/pacman,%20dossier.html#Chapter%203&quot;&gt;The Pac-Man Dossier Ch#3&lt;/a&gt; for some background on how the map is divided.  I’ll be using the same method.  There are tons of Pac-Man related knowledge to be found here.&lt;/p&gt;

&lt;p&gt;The high points are, the grid is 28 cols by 36 rows.  The original game was 8px square per tile.  I’m going to bump that up to 16px, but otherwise the map will stay the same.&lt;/p&gt;

&lt;p&gt;I’ve created my own set of tiles using Photoshop (based on the original art or course) and placed them under a folder called “./grfx”.&lt;/p&gt;

&lt;h3 id=&quot;enable-png-in-code-and-loading-the-texture&quot;&gt;Enable PNG in code and loading the texture&lt;/h3&gt;
&lt;p&gt;Reminder: There are tons of SDL specific tutorials at &lt;a href=&quot;http://lazyfoo.net/tutorials/SDL/&quot;&gt;lazyfoo.net&lt;/a&gt; and I refer to them frequently.  I will point out specific features as we use them, but not in depth, I assume you can read the code and docs, and the SDL tutorials…&lt;/p&gt;

&lt;p&gt;We’ll be using the renderer and acceleration, so we need to start initing SDL subsystems.  All we need for now is VIDEO.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SDL_Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SDL_INIT_VIDEO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SDL_Init() failed, error = %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDL_GetError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Creating a window is the same, we make one 800x600 to hold the map (the map is 448x576 px)&lt;/p&gt;

&lt;p&gt;We also need a renderer to make use of textures, creating one is easy&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;SDL_CreateRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppSDLWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDL_RENDERER_ACCELERATED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Set the color that will clear the renderer.  I made it grey so the map edges would be visible.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;SDL_SetRenderDrawColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ppSDLRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One last bit of code setup.  We need to turn on PNG support.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;IMG_Init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IMG_INIT_PNG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Loading a texture takes 2 steps.  First we load the image to a SDL_Surface, the we create a SDL_Texture from that SDL_Surface for the renderer.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;SDL_Texture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LoadTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;szFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDL_Renderer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pSDLRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SDL_Texture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pTextureOut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SDL_Surface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pSDLSurface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMG_Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;szFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pSDLSurface&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nullptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IMG_Load() failed, error = %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IMG_GetError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pTextureOut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDL_CreateTextureFromSurface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pSDLRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pSDLSurface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SDL_FreeSurface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pSDLSurface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pTextureOut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;creating-the-2d-tilemap&quot;&gt;Creating the 2D TileMap&lt;/h3&gt;
&lt;p&gt;Great, now we can load a texture.  The next step is dividing up that texture into an ordered list of source rects representing the various tiles available.&lt;/p&gt;

&lt;p&gt;For our Pac-Man clone, we’re going to assume the texture holds an evenly divisible number of tiles in each direction.  Each tile will be 16x16 pixels (the original was 8x8) and I am leaving some room for future tiles.  Below is an example of the texture layout.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/TileLayout02.png&quot; alt=&quot;Tile layout&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So what would the code look like to do all that fancy dividing?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TiledMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SDL_Rect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// Size of the texture
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;SDL_Rect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tileRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// size of the tile
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;SDL_Texture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// texture holding the tiles
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Uint16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pMapIndices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// array of indicies to the tiles
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Uint16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countOfIndicies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// count of that previous array
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Copy the map indicies data
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;_pMapIndicies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uint16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;countOfIndicies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SDL_memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pMapIndicies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pMapIndices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;countOfIndicies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Uint16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Copy the texture data
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;_pTileTexture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SDL_memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_textureRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textureRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SDL_Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Calculate the total available tiles on the texture 
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// and allocate space for the source rects
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;_tileSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tileRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;//Pick either, we assuming they are the same so far
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Uint16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureTilesPerWidth&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_textureRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tileSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Uint16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureTilesPerHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_textureRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tileSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_cTilesOnTexture&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_textureRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tileSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureTilesPerHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_pTileRects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDL_Rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cTilesOnTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Loop through the tiles and set the source rects
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureTilesPerHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureTilesPerWidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_pTileRects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureTilesPerHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tileSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_pTileRects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureTilesPerHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tileSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_pTileRects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureTilesPerHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tileSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_pTileRects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;textureTilesPerHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tileSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This all assumes we have the texture and indicies data already loaded.  We just saw how to load a texture, we’ll get to the indicies in a moment.&lt;/p&gt;

&lt;p&gt;First, how do we render all these rects?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Loop through the map of indicies and render each tile in order.
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TiledMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SDL_Renderer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pSDLRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uint16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cxScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uint16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Center the map, so calculate the offsets
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Uint16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cxOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cxScreen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cCols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tileSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Uint16&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cyScreen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cRows&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tileSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;SDL_Rect&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetRect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tileSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tileSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cRows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cCols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;targetRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tileSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cxOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;targetRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_tileSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cyOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentTileIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_pMapIndicies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_cCols&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;SDL_RenderCopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pSDLRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_pTileTexture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_pTileRects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentTileIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;game-loop&quot;&gt;Game Loop&lt;/h3&gt;
&lt;p&gt;There are lots of different game loops out there.  I am going to use an extremely simple one for now, since it’s all we need.  We’ll fix the framerate to 60 FPS.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gameloop02.png&quot; alt=&quot;Game loop&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fQuit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;SDL_Event&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eventSDL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Uint32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startTicks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fQuit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;startTicks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDL_GetTicks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SDL_PollEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventSDL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eventSDL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDL_QUIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fQuit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fQuit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SDL_RenderClear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pSDLRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tiledMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pSDLRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_cxScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_cyScreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SDL_RenderPresent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pSDLRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Fix this at ~c_framesPerSecond
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;Uint32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endTicks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SDL_GetTicks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Uint32&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsedTicks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endTicks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startTicks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elapsedTicks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_ticksPerFrame&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;SDL_Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_ticksPerFrame&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elapsedTicks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ideally you would never execute that “No” branch as it means you spent more than your alloted time per frame.  This means your framerate is not keeping up.&lt;/p&gt;

&lt;h3 id=&quot;visual-studio&quot;&gt;!@$%#^ Visual Studio!!&lt;/h3&gt;
&lt;p&gt;I spent a good of time debugging why my&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;IMG_Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;szFileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;p&gt;was failing.  I knew VS would copy built files to another directory (e.g. ./Debug/x64/…) so I would need to copy my graphics files over.  However, it was still failing.&lt;/p&gt;

&lt;p&gt;Visual studio decided that while the exe would get copied to the $(SolutionDir)/{output} folder the current working directory would get set to $(ProjectDir)/.&lt;/p&gt;

&lt;p&gt;Remember to check your cwd in cases like this.  You can solve this with an automated copy as part of your post-build in VS&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/VSPostBuildEvent02.png&quot; alt=&quot;VS Post-Build&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;generating-indicies&quot;&gt;Generating indicies&lt;/h3&gt;
&lt;p&gt;If you’re making a game, find out what tools you need up front, and see if there are ones available in your price range or if you can make them yourself.  For 2D tiles, there are a few options, but we’re going to reuse the same map for a while, so I have it in a static array we can keep copying.  I needed to work out the per-pixel logic anyway.  (If you look at the tiles, you’ll notice there are “inside” or “reverse” versions of each turn and edge).&lt;/p&gt;

&lt;h2 id=&quot;output&quot;&gt;Output&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;win32&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/win32out02.png&quot; alt=&quot;Running Win32 Application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;linux&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/linuxout02.png&quot; alt=&quot;Running Linux Application&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;coming-soon&quot;&gt;Coming soon&lt;/h3&gt;
&lt;p&gt;Next time we’re going to add the player sprite and keyboard input.&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Sep 2016 01:00:56 -0700</pubDate>
        <link>http://manixaist.github.io/coding/game/xplat/2016/09/09/xplat-pmc-02.html</link>
        <guid isPermaLink="true">http://manixaist.github.io/coding/game/xplat/2016/09/09/xplat-pmc-02.html</guid>
        
        
        <category>coding</category>
        
        <category>game</category>
        
        <category>xplat</category>
        
      </item>
    
      <item>
        <title>Cross Platform Game - 01</title>
        <description>&lt;h1 id=&quot;cross-platform-game---01&quot;&gt;Cross Platform Game - 01&lt;/h1&gt;
&lt;p&gt;Cross platform development is something I have wanted to try for a while, and what better way than with a simple game?  I’ve chosen to make a Pac-Man clone, and over the next several posts will flesh it out further and further - ensuring it runs on both Windows and Linux.&lt;/p&gt;

&lt;p&gt;This will not be a tutorial on a specific API (e.g. SDL) though I will be using SDL2 for the cross platform encapsulation and I will show you everything you need to get setup and started.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;goal-for-today&quot;&gt;Goal for Today&lt;/h2&gt;
&lt;p&gt;Produce a working exe on both Windows and Linux with the proper SDL2 libraries installed and linking.&lt;/p&gt;

&lt;h3 id=&quot;assumptions&quot;&gt;Assumptions&lt;/h3&gt;
&lt;p&gt;My posts will assume a few things&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Basic understanding of Git/Github&lt;/li&gt;
  &lt;li&gt;Basic C/C++ coding skills&lt;/li&gt;
  &lt;li&gt;X64 capable machine, and OS installed.&lt;/li&gt;
  &lt;li&gt;You can build x86 instead, but you will need to adjust some steps to do this on a x64 machine, and I will assume you know how to do that if you’re trying.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example-code&quot;&gt;Example Code&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/manixaist/xplat-pmc-tutorial-01&quot;&gt;Github repo&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;windows&quot;&gt;Windows&lt;/h2&gt;
&lt;p&gt;I am running on Windows 10 Pro x64 machine.  Any decently recent version of Windows should work just fine.&lt;/p&gt;

&lt;p&gt;This is what you’re going to need at a minimum, and it’s all free even on Windows.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.visualstudio.com/&quot;&gt;Visual Studio&lt;/a&gt;: download the “Community 2015” version and install it. (Assuming you don’t already have a version of Visual Studio.)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/&quot;&gt;Git-scm&lt;/a&gt;: install for Windows (I used 2.10.0 and the default install options.)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.libsdl.org/download-2.0.php&quot;&gt;SDL&lt;/a&gt;: download the zip or tarball.  Unzip the file and place the folder somewhere accessible by your code (it has the headers and libs e.g. “../SDL2-2.0.4/Include”.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’re going to want to place the development dlls in your system folder so they are accessible, so find the appropriate one (e.g. SDL2-2.0.4\lib\x64\SDL2.dll) and place it in %windir%\system32.  (This is where you would need to know about sysWOW64 for x86 on amd64 - but ignore it if it means nothing to you).&lt;/p&gt;

&lt;h3 id=&quot;visual-studio-configuration&quot;&gt;Visual Studio Configuration:&lt;/h3&gt;
&lt;p&gt;Before we start, aside from some specific naming I will use to make the git repo easier to deal with, all this entails is telling VS where to find the SDL2 APIs we just downloaded.  It’s the same basic steps to add any external library on Windows (e.g. Direct3D or your_custom_control.lib).&lt;/p&gt;

&lt;p&gt;Open up Visual Studio.  We will need to do some setup on the project so it can find the SDL files we’ll need such as the headers, static libs, and dlls.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Go to File-&amp;gt;New Project&lt;/li&gt;
  &lt;li&gt;Select “Win32 Console Application”&lt;/li&gt;
  &lt;li&gt;Check “Create directory for solution”&lt;/li&gt;
  &lt;li&gt;Check “Create new Git repository”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make the name “windows” (this is the project name in the end) and the Location under your root to add “xplat-pmc-tutorial-01”.  This will make the linux side much easier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/VSNewProject.png&quot; alt=&quot;Visual Studio 2015 New Project Settings&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Uncheck “Precompiled header”&lt;/li&gt;
  &lt;li&gt;Check “empty project”&lt;/li&gt;
  &lt;li&gt;Uncheck SDL checks (different SDL - Software development lifecycle)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One the new project loads…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Right-click on the project and select “add new item”&lt;/li&gt;
  &lt;li&gt;Add main.cpp to the root of the repo (up one level from the project)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Edit your main file to the following.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// main.cpp : Defines the entry point for the console application. 
// 
&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;SDL.h&amp;gt; 
&lt;/span&gt; 
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;SDL_Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'Sup World?&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;SDL_Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It won’t build yet, and you should see a bunch of red squiggles since VS can’t find those files/references.  To fix this.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Project-&amp;gt;Properties-&amp;gt;Configuration Properties-&amp;gt;C++&amp;gt;Additional Include Directories&lt;/li&gt;
  &lt;li&gt;Add “SDL2-2.0.4\Include”&lt;/li&gt;
  &lt;li&gt;Click Apply&lt;/li&gt;
  &lt;li&gt;Project-&amp;gt;Properties-&amp;gt;Linker-&amp;gt;Input-&amp;gt;Additional Dependencies&lt;/li&gt;
  &lt;li&gt;Add “SDL2.lib and SDL2main.lib”&lt;/li&gt;
  &lt;li&gt;Click Apply&lt;/li&gt;
  &lt;li&gt;Project-&amp;gt;Properties-&amp;gt;Linker-&amp;gt;General-&amp;gt;Additional Library Directories&lt;/li&gt;
  &lt;li&gt;Add your path to the libs (e.g. “..\SDL2-2.0.4\lib\x64)&lt;/li&gt;
  &lt;li&gt;Click Ok&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I won’t post every pic, they follow a pattern here, but here is an example of the lib paths.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/VSLibPaths.png&quot; alt=&quot;Visual Studio 2015 New Project Settings&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lazyfoo.net/tutorials/SDL/index.php&quot;&gt;lazyfoo&lt;/a&gt; has excellent SDL2 specific tutorials as well as more info on how to setup the depenedencies if you need another source.&lt;/p&gt;

&lt;p&gt;At this point your project should know how to locate the SDL headers, static libs and runtime dll for x64.  Now we’ll try and build a simple exe that links against SDL2 to prove it. If it builds and links you should be good to go.  Be sure to check you changed the main signature.  SDL requires the format above and not “int main(void).”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/win32out.png&quot; alt=&quot;Running Windows Application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Take a look at this line for a second.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;SDL_Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Already SDL is solving problems, if you don’t believe me google getting Sleep and sleep to work on linux/win32 :)  Commit the changed files.  VS nicely adds a bunch of stuff to your .gitignore file so you shouldn’t see anything too odd.&lt;/p&gt;

&lt;p&gt;At this point you can push it to Github.  I placed mine at https://github.com/manixaist/xplat-pmc-tutorial-01, but we’re not done quite yet.  On to Linux.&lt;/p&gt;

&lt;h2 id=&quot;linux&quot;&gt;Linux:&lt;/h2&gt;
&lt;p&gt;For the linux side I’m using Ubuntu (specifically, ubuntu-16.04.1-desktop-amd64.iso).  I chose it because…&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It’s Free&lt;/li&gt;
  &lt;li&gt;It’s super easy to install&lt;/li&gt;
  &lt;li&gt;I’m not building a server&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I’m going to assume you can get Ubuntu installed (burn it to CD or using a USB).  I will pick up on the first logon of my new user.&lt;/p&gt;

&lt;p&gt;Open a terminal and create a new directory for your source.  I put mine at ~/coderoot&lt;/p&gt;

&lt;p&gt;For some reason, Ubuntu did not come with Git, so install it with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;sudo apt install git &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Open a browser (mine came with Firefox installed, use whichever you love most)&lt;/li&gt;
  &lt;li&gt;Go to &lt;a href=&quot;https://code.visualstudio.com&quot;&gt;Visual Studio Code&lt;/a&gt; and click on the .deb file for Debian/Ubuntu&lt;/li&gt;
  &lt;li&gt;Open with software install&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Click install&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Open VS Code&lt;/li&gt;
  &lt;li&gt;Click on the extensions icon (last in list, looks like a square) and install the C/C++ extension (git history as well if you want)&lt;/li&gt;
  &lt;li&gt;Enable them once installed and VS Code will restart&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the terminal&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;sudo apt install libsdl2-2.0-0 
sudo apt install libsdl2-dev &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now clone the repo we saved locally, for me this is&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;git clone https://github.com/manixaist/xplat-pmc-tutorial-01.git &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Add “.vscode/” and “*.exe” to .gitignore&lt;/p&gt;

&lt;p&gt;And now for the makefile.  I’ve tried to keep this as simple/flexible as possible for now&lt;/p&gt;

&lt;p&gt;In the root of the repository…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;nano makefile &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html&quot;&gt;Excellent makefile reference btw&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-make&quot; data-lang=&quot;make&quot;&gt;&lt;span class=&quot;nv&quot;&gt;SHELL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /bin/sh 
&lt;span class=&quot;nl&quot;&gt;.SUFFIXES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
&lt;span class=&quot;nl&quot;&gt;.SUFFIXES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;.cpp .o &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;EXE_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; xplat-pmc-tutorial-01.exe 
&lt;span class=&quot;c&quot;&gt;# Add additional .cpp/.o pairs to the MODULES List (e.g. main input graphics ...) 
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MODULES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; main 
&lt;span class=&quot;c&quot;&gt;# Generates a list of the modules with &quot;.o&quot; appended 
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;OBJS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(MODULES)&lt;/span&gt;.o 
&lt;span class=&quot;c&quot;&gt;# external libraries. 
# remember ordering is important to the linker... 
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LIBS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;-lSDL2&lt;/span&gt; 
&lt;span class=&quot;nv&quot;&gt;REBUILDABLES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(OBJS)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(EXE_NAME)&lt;/span&gt; 
&lt;span class=&quot;c&quot;&gt;# All warning, debug output, C++11, x64 
# later we can tease out the debug 
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CXXFLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; -Wall -g -std&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;c++11 -m64 
&lt;span class=&quot;c&quot;&gt;# list of external paths 
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INCLUDE_PATHS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;
	&lt;span class=&quot;err&quot;&gt;/usr/include/SDL2&lt;/span&gt;  
&lt;span class=&quot;c&quot;&gt;# Expands each include path above to -I/path/1 -I/path/2 ... etc 
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;INCLUDES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; -I&lt;span class=&quot;nv&quot;&gt;$(INCLUDE_PATHS)&lt;/span&gt; 
&lt;span class=&quot;nl&quot;&gt;all &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(EXE_NAME) &lt;/span&gt;
	&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;All &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; 
&lt;span class=&quot;c&quot;&gt;# This is the linking rule, it creates the exe from the list of dependent objects 
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;$(EXE_NAME) &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(OBJS) &lt;/span&gt;
	g++ -g -o &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$^&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(LIBS)&lt;/span&gt; 
&lt;span class=&quot;c&quot;&gt;# Compilation rule, it matches the object's corresponding .cpp file 
&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;%.o &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;%.cpp &lt;/span&gt;
	g++ -o &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt; -c &lt;span class=&quot;nv&quot;&gt;$(CXXFLAGS)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$(INCLUDES)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$&amp;lt;&lt;/span&gt; 
&lt;span class=&quot;nl&quot;&gt;.PHONY &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clean &lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;clean &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;  
	rm -f &lt;span class=&quot;nv&quot;&gt;$(REBUILDABLES)&lt;/span&gt; 
	&lt;span class=&quot;err&quot;&gt;echo Clean done &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now you should be able to build with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;make all &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then run the local exe&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;./xplat-pmc-tutorial-01.exe &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And you can clean up with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;make clean &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/images/linuxout.png&quot; alt=&quot;Running Linux Application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can push that back up and the first repo is done.  We now have common code linking to SDL2 compiling and running on both Win32 and Linux.  Note we did not touch the source file in the linux half…ok I did, but just to fix the include style from &lt;SDL2.h&gt; to &quot;SDL2.h&quot;, you can this if you look at the repo history.&lt;/SDL2.h&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;coming-soon&quot;&gt;Coming soon&lt;/h3&gt;
&lt;p&gt;We’ll start making it look more like a game with some tiled graphics….&lt;/p&gt;
</description>
        <pubDate>Wed, 07 Sep 2016 09:31:43 -0700</pubDate>
        <link>http://manixaist.github.io/coding/game/xplat/2016/09/07/xplat-pmc-01.html</link>
        <guid isPermaLink="true">http://manixaist.github.io/coding/game/xplat/2016/09/07/xplat-pmc-01.html</guid>
        
        
        <category>coding</category>
        
        <category>game</category>
        
        <category>xplat</category>
        
      </item>
    
  </channel>
</rss>
